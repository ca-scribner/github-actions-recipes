name: Test triggering using keyword and javascript actions
on: 
  issue_comment:
    types: [created]

jobs:
  test_pr_comment_context:
    runs-on: ubuntu-latest
    name: Testing PR Comment Context
    outputs:
      pr_number: ${{ steps.pr_comment_context.outputs.pr_number }}
      in_scope: ${{ steps.am_i_in_scope.outputs.in_scope }}
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - uses: ./get-pr-comment-context/ # Uses an action in this directory
        id: pr_comment_context
        with:
          allowed_author_associations: '[OWNER, COLLABORATOR]'
      - name: Get allowed_author
        run: echo "The value of allowed_author is ${{ steps.pr_comment_context.outputs.allowed_author }}"
      - name: Get is_pr_comment
        run: echo "The value of is_pr_comment is ${{ steps.pr_comment_context.outputs.is_pr_comment }}"
      - name: Get pr_number
        run: echo "The value of pr_number is ${{ steps.pr_comment_context.outputs.pr_number }}"
      - name: Get from_pr_originator
        run: echo "The value of from_pr_originator is ${{ steps.pr_comment_context.outputs.from_pr_originator }}"

      - name: Check if trigger is in scope (hits trigger word and is an in-scope author)
        id: am_i_in_scope
        shell: bash
        run: |
          # In scope if push or if PR-comment saying "/deploy" from a contributor/owner
          if   [ ${{ github.event_name }} == "push" ] \
            || (     [ ${{ steps.pr_comment_context.outputs.is_pr_comment }} == "true" ] \
                  && [ ${{ steps.pr_comment_context.outputs.allowed_author }} == "true" ] \
                  && [ "${{ github.event.comment.body }}" == "/deploy" ]); then
              echo trigger is in scope
              echo "::set-output name=in_scope::true"
              echo "pretend to set-output name=in_scope::true"
          else
              echo trigger is out of scope
              # echo "::set-output name=in_scope::false"  # Don't set anything if false
          fi

      - name: Set an env var
        run: echo "SOME_ENV_VAR=1234567890" >> $GITHUB_ENV

      - name: Respond by comment
        id: respond
        uses: actions/github-script@v1
        with: 
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var SOME_VAR = process.env.LOCAL_SOME_ENV_VAR
            var IN_SCOPE = process.env.IN_SCOPE

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Build activated.  Track in [Github Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/).  Also look I can use variables! ${SOME_VAR} ${IN_SCOPE}`
            })
        env: 
          IN_SCOPE: ${{ steps.am_i_in_scope.outputs.in_scope }}
          LOCAL_SOME_ENV_VAR: ${{ env.SOME_ENV_VAR }}

  get_in_scope:
    needs: test_pr_comment_context
    runs-on: ubuntu-latest
    steps:
      - name: Get in_scope
        run: echo "in_scope = ${{ needs.test_pr_comment_context.outputs.in_scope }}"
